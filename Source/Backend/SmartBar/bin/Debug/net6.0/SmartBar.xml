<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartBar</name>
    </assembly>
    <members>
        <member name="T:SmartBar.Controllers.AuthController">
            <summary>
            Controlador de autenticação
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.AuthController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,SmartBar.Services.UserService,SmartBar.Services.BarService)">
            <summary>
            Contrutor do controlador de autenticação
            </summary>
            <param name="config"></param>
            <param name="userService"></param>
            <param name="barService"></param>
        </member>
        <member name="M:SmartBar.Controllers.AuthController.Login(SmartBar.Models.LoginModel)">
            <summary>
            HttpPOST do login
            </summary>
            <param name="login"></param>
            <returns>Token ou NotFound</returns>
        </member>
        <member name="T:SmartBar.Controllers.BarController">
            <summary>
            Controlador de bares
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.BarController.#ctor(SmartBar.Services.BarService)">
            <summary>
            Construtor do controlador do bar
            </summary>
            <param name="barService"></param>
        </member>
        <member name="M:SmartBar.Controllers.BarController.GetBarByEmail(System.String,System.String)">
            <summary>
            Obter determinado bar
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns>Null ou Bar</returns>
        </member>
        <member name="M:SmartBar.Controllers.BarController.GetUserById">
            <summary>
            Obter determinado bar através do ID
            </summary>
            <returns>NotFound ou Bar</returns>
        </member>
        <member name="M:SmartBar.Controllers.BarController.PostColaborator(SmartBar.Models.BarModel)">
            <summary>
            Inserir um bar
            </summary>
            <param name="bar"></param>
            <returns>BadRequest ou Colaborador</returns>
        </member>
        <member name="T:SmartBar.Controllers.HistoricController">
            <summary>
            Controller do histórico
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.HistoricController.#ctor(SmartBar.Services.HistoricService)">
            <summary>
            Construtor do controller do histórico
            </summary>
            <param name="historicService"></param>
        </member>
        <member name="M:SmartBar.Controllers.HistoricController.GetAll">
            <summary>
            Obter o Histórico Global
            </summary>
            <returns>O Histórico ou NotFound</returns>
        </member>
        <member name="M:SmartBar.Controllers.HistoricController.GetAllByClient">
            <summary>
            Obter o Histórico de um determinado cliente
            </summary>
            <returns>O Histórico do Cliente ou NotFound</returns>
        </member>
        <member name="M:SmartBar.Controllers.HistoricController.GetAllByBarAndDate(System.String)">
            <summary>
            Obter o Histórico de pedidos por idBar e por dateRequest caso este não seja nulo
            </summary>
            <param name="dateReq"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBar.Controllers.ProductController">
            <summary>
            Controlador de produtos
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.#ctor(SmartBar.Services.ProductService)">
            <summary>
            Construtor do controlador de produtos
            </summary>
            <param name="productService"></param>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProducts">
            <summary>
            Obter a lista de todos os produtos existentes
            </summary>
            <returns>Ok(List) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProductByID(System.String)">
            <summary>
            Obter um produto através do seu ID
            </summary>
            <param name="productID"></param>
            <returns>Ok(produto) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProductsHotFood">
            <summary>
            Obter a lista de menus (tipo 1)
            </summary>
            <returns>Ok(List) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProductsPackaged">
            <summary>
            Obter a lista de snacks (tipo 2)
            </summary>
            <returns>Ok(List) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProductsHotDrink">
            <summary>
            Obter a lista de bebidas quentes (tipo 3)
            </summary>
            <returns>Ok(List) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.GetProductsColdDrink">
            <summary>
            Obter a lista de bebidas frias (tipo 4)
            </summary>
            <returns>Ok(List) ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.PostProduct(SmartBar.Models.ProductModel)">
            <summary>
            Adicionar um produto
            </summary>
            <param name="product"></param>
            <returns>Ok(), BadRequest() ou NotFound()</returns>
        </member>
        <member name="M:SmartBar.Controllers.ProductController.PutProduct(SmartBar.Models.ProductModel)">
            <summary>
            Alterar um produto
            </summary>
            <param name="product"></param>
            <returns>Ok(), BadRequest() ou NotFound()</returns>
        </member>
        <member name="T:SmartBar.Controllers.PushNotificationController">
            <summary>
            Controlador de push notifications
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.PushNotificationController.#ctor(SmartBar.Services.PushNotificationService)">
            <summary>
            Contrutor do controlador de push notifications
            </summary>
            <param name="pushNotificationService"></param>
        </member>
        <member name="M:SmartBar.Controllers.PushNotificationController.GetAllByUserId">
            <summary>
            Obter notificações por utilizador
            </summary>
            <returns>Ok, BadRequest ou NotFound</returns>
        </member>
        <member name="M:SmartBar.Controllers.PushNotificationController.PostNotification(SmartBar.Models.PushNotificationModel)">
            <summary>
            Inserir uma notificação
            </summary>
            <param name="pushNotification"></param>
            <returns>Ok ou BadRequest</returns>
        </member>
        <member name="M:SmartBar.Controllers.PushNotificationController.DeleteNotification(System.String)">
            <summary>
            Apagar uma notificação
            </summary>
            <param name="notificationId"></param>
            <returns>Ok ou BadRequest</returns>
        </member>
        <member name="T:SmartBar.Controllers.RequestController">
            <summary>
            Controlador de pedidos
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.RequestController.#ctor(RequestService,SmartBar.Services.ProductService,SmartBar.Services.UserService,SmartBar.Services.HistoricService,SmartBar.Services.PushNotificationService)">
            <summary>
            Construtor do controlador de pedidos
            </summary>
            <param name="resquestService"></param>
            <param name="productService"></param>
            <param name="userService"></param>
            <param name="historicService"></param>
            <param name="pushNotificationService"></param>
        </member>
        <member name="M:SmartBar.Controllers.RequestController.GetAll">
            <summary>
            Obter todos os pedidos em aberto
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Controllers.RequestController.GetByState(System.Int32)">
            <summary>
            Obter pedidos em aberto por determinado estado
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Controllers.RequestController.PostRequest(SmartBar.Models.RequestModel)">
            <summary>
            Inserção de um pedido
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Controllers.RequestController.PutRequest(System.String,System.Boolean)">
            <summary>
            Incrementa o estado do Pedido até "concluído" (estado 3) e depois é convertido em histórico
            Se o pedido for cancelado, o seu estado será o 4 e convertido logo em histórico
            </summary>
            <param name="idRequest"></param>
            <param name="confirmed"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBar.Controllers.UserController">
            <summary>
            Controlador de utilizadores
            </summary>
        </member>
        <member name="M:SmartBar.Controllers.UserController.#ctor(SmartBar.Services.UserService)">
            <summary>
            Construtor do controlador de utilizadores
            </summary>
            <param name="userService"></param>
        </member>
        <member name="M:SmartBar.Controllers.UserController.GetUserByEmail(System.String,System.String)">
            <summary>
            Obter determinado utilizador através do email
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns>Null ou Cliente</returns>
        </member>
        <member name="M:SmartBar.Controllers.UserController.GetUserById">
            <summary>
            Obter determinado cliente através do ID
            </summary>
            <returns>NotFound ou Cliente</returns>
        </member>
        <member name="M:SmartBar.Controllers.UserController.PostUser(SmartBar.Models.UserModel)">
            <summary>
            Inserir um cliente
            </summary>
            <param name="user"></param>
            <returns>BadRequest ou Cliente</returns>
        </member>
        <member name="T:SmartBar.Helpers.Functions">
            <summary>
            Funções auxiliares
            </summary>
        </member>
        <member name="M:SmartBar.Helpers.Functions.EncodePassword(System.String)">
            <summary>
            Encriptar passwords
            </summary>
            <param name="password"></param>
            <returns>Password encriptada</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SmartBar.Helpers.Functions.CheckEmail(System.String)">
            <summary>
            Verificar se determinado email está num formato correto
            </summary>
            <param name="email"></param>
            <returns>True ou False</returns>
        </member>
        <member name="T:SmartBar.Models.BarModel">
            <summary>
            Modelo do bar
            </summary>
        </member>
        <member name="M:SmartBar.Models.BarModel.#ctor">
            <summary>
            Construtor do bar vazio
            </summary>
        </member>
        <member name="M:SmartBar.Models.BarModel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Construtor do bar default
            </summary>
            <param name="Id"></param>
            <param name="Email"></param>
            <param name="Password"></param>
            <param name="Description"></param>
        </member>
        <member name="P:SmartBar.Models.BarModel.Id">
            <summary>
            ID do Bar
            </summary>
        </member>
        <member name="P:SmartBar.Models.BarModel.Email">
            <summary>
            Email de acesso do bar
            </summary>
        </member>
        <member name="P:SmartBar.Models.BarModel.Password">
            <summary>
            Password de acesso do bar
            </summary>
        </member>
        <member name="P:SmartBar.Models.BarModel.Description">
            <summary>
            Descrição do bar
            </summary>
        </member>
        <member name="T:SmartBar.Models.HistoricModel">
            <summary>
            Modelo de um historico
            </summary>
        </member>
        <member name="M:SmartBar.Models.HistoricModel.#ctor">
            <summary>
            Construtor vazio do Histórico
            </summary>
        </member>
        <member name="M:SmartBar.Models.HistoricModel.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{SmartBar.Models.ProductRequest},System.String,System.Double,System.Int32,System.String)">
            <summary>
            Construtor default do Histórico
            </summary>
            <param name="idRequest"></param>
            <param name="idClient"></param>
            <param name="idBar"></param>
            <param name="productAndQuantity"></param>
            <param name="dateRequest"></param>
            <param name="totalPrice"></param>
            <param name="state"></param>
            <param name="horas"></param>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.IdRequest">
            <summary>
            ID do Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.IdClient">
            <summary>
            ID do Cliente a que pertence o Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.IdBar">
            <summary>
            ID do bar a que pertence o Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.ProductAndQuantity">
            <summary>
            Lista de ID´s de Produtos que o Pedido tem
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.DateRequest">
            <summary>
            Data do pedido que foi efetuado
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.TotalPrice">
            <summary>
            Preço total do Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.State">
            <summary>
            Estado que o pedido se encontra
            </summary>
        </member>
        <member name="P:SmartBar.Models.HistoricModel.Horas">
            <summary>
            Hora prevista para o levantamento do Pedido
            </summary>
        </member>
        <member name="T:SmartBar.Models.LoginModel">
            <summary>
            Modelo do login
            </summary>
        </member>
        <member name="M:SmartBar.Models.LoginModel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Construtor do Modelo do Login
            </summary>
            <param name="UserType"></param>
            <param name="Email"></param>
            <param name="Password"></param>
            /// <param name="FirebaseToken"></param>
        </member>
        <member name="P:SmartBar.Models.LoginModel.UserType">
            <summary>
            Tipo de utilizador (Cliente ou Colaborador)
            </summary>
        </member>
        <member name="P:SmartBar.Models.LoginModel.Email">
            <summary>
            Email do utilizador
            </summary>
        </member>
        <member name="P:SmartBar.Models.LoginModel.Password">
            <summary>
            Password do utilizador
            </summary>
        </member>
        <member name="P:SmartBar.Models.LoginModel.FirebaseToken">
            <summary>
            Token do firebase (para push notification)
            </summary>
        </member>
        <member name="T:SmartBar.Models.ProductModel">
            <summary>
            Modelo de um produto
            </summary>
        </member>
        <member name="M:SmartBar.Models.ProductModel.#ctor">
            <summary>
            Construtor vazio de um produto
            </summary>
        </member>
        <member name="M:SmartBar.Models.ProductModel.#ctor(System.String,System.String,System.String,System.Decimal,System.Int32,System.Int32)">
            <summary>
            Construtor default de um produto
            </summary>
            <param name="Id"></param>
            <param name="Name"></param>
            <param name="Picture"></param>
            <param name="Price"></param>
            <param name="Stock"></param>
            <param name="Type"></param>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Id">
            <summary>
            ID do produto
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Name">
            <summary>
            Nome do produto
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Picture">
            <summary>
            Imagem do produto
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Price">
            <summary>
            Preço do produto
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Stock">
            <summary>
            Stock do produto
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductModel.Type">
            <summary>
            Tipo de Produto -> hot food =1; Packaged = 2; hot drink =3; cold drink =4
            </summary>
        </member>
        <member name="M:SmartBar.Models.ProductRequest.#ctor">
            <summary>
            Construtor dos produtos selecionados no pedido vazio
            </summary>
        </member>
        <member name="M:SmartBar.Models.ProductRequest.#ctor(System.String,System.Int32)">
            <summary>
            construtor default
            </summary>
            <param name="idProduct"></param>
            <param name="quantity"></param>
        </member>
        <member name="P:SmartBar.Models.ProductRequest.IdProduct">
            <summary>
            Id do produto pertencente ao pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.ProductRequest.Quantity">
            <summary>
            quantidade de produtos selecionados 
            </summary>
        </member>
        <member name="T:SmartBar.Models.PushNotificationModel">
            <summary>
            Modelo de uma push notification
            </summary>
        </member>
        <member name="M:SmartBar.Models.PushNotificationModel.#ctor">
            <summary>
            Construtor de push notification vazio
            </summary>
        </member>
        <member name="M:SmartBar.Models.PushNotificationModel.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Contrutor de push notification default
            </summary>
            <param name="Id"></param>
            <param name="Token"></param>
            <param name="UserId"></param>
            <param name="Title"></param>
            <param name="Message"></param>
            <param name="Date"></param>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.Id">
            <summary>
            Id da notificação
            </summary>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.Token">
            <summary>
            Token firebase do dispositivo
            </summary>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.UserId">
            <summary>
            ID do utilizador que recebe a push notification
            </summary>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.Title">
            <summary>
            Título da push notification
            </summary>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.Message">
            <summary>
            Mensagem da push notification
            </summary>
        </member>
        <member name="P:SmartBar.Models.PushNotificationModel.Date">
            <summary>
            Data da push notification
            </summary>
        </member>
        <member name="M:SmartBar.Models.RequestModel.#ctor">
            <summary>
            Construtor vazio de um Pedido
            </summary>
        </member>
        <member name="M:SmartBar.Models.RequestModel.#ctor(System.String,System.String,System.Collections.Generic.List{SmartBar.Models.ProductRequest},System.String,System.Double,System.Int32,System.String,System.String,System.String)">
            <summary>
            Construtor default de um Pedido
            </summary>
            <param name="IdRequest"></param>
            <param name="IdCliente"></param>
            <param name="ProductAndQuantity"></param>
            <param name="DateRequest"></param>
            <param name="Value"></param>
            <param name="State"></param>
            <param name="FirebaseToken"></param>
            <param name="IdBar"></param>
            <param name="Horas"></param>
        </member>
        <member name="P:SmartBar.Models.RequestModel.IdRequest">
            <summary>
            ID do Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.IdCliente">
            <summary>
            ID do Cliente a que pertence o Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.ProductAndQuantity">
            <summary>
            Lista de ID´s e quantidades de Produtos que o Pedido tem
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.DateRequest">
            <summary>
            Data que o Pedido foi efetuado
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.Value">
            <summary>
            Valor total do Pedido
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.State">
            <summary>
            Estado que o pedido se encontra
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.FirebaseToken">
            <summary>
            Token da firebase (para push notification)
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.IdBar">
            <summary>
            Id do bar
            </summary>
        </member>
        <member name="P:SmartBar.Models.RequestModel.Horas">
            <summary>
            hora prevista para o levantamento do pedido
            </summary>
        </member>
        <member name="T:SmartBar.Models.ResponseModel">
            <summary>
            Modelo da resposta
            </summary>
        </member>
        <member name="M:SmartBar.Models.ResponseModel.#ctor">
            <summary>
            Construtor vazio da resposta
            </summary>
        </member>
        <member name="M:SmartBar.Models.ResponseModel.#ctor(System.Int32,System.String)">
            <summary>
            Construtor default da resposta
            </summary>
            <param name="StatusCode"></param>
            <param name="Message"></param>
        </member>
        <member name="P:SmartBar.Models.ResponseModel.StatusCode">
            <summary>
            Status code da resposta
            </summary>
        </member>
        <member name="P:SmartBar.Models.ResponseModel.Message">
            <summary>
            Mensagem da resposta
            </summary>
        </member>
        <member name="T:SmartBar.Models.SmartBarDatabaseSettingsModel">
            <summary>
            Modelo de configurações da base de dados
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.ConnectionString">
            <summary>
            String de conexeção
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.DatabaseName">
            <summary>
            Nome da base de dados
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.ColaboratorCollectionName">
            <summary>
            Coleção de colaboradores
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.HistoricCollectionName">
            <summary>
            Coleção de histórico
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.PushNotificationCollectionName">
            <summary>
            Coleção de notificações
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.ProductCollectionName">
            <summary>
            Coleção de produtos
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.RequestCollectionName">
            <summary>
            Coleção de pedidos
            </summary>
        </member>
        <member name="P:SmartBar.Models.SmartBarDatabaseSettingsModel.UserCollectionName">
            <summary>
            Coleção de utilizadores
            </summary>
        </member>
        <member name="T:SmartBar.Models.UserModel">
            <summary>
            Modelo do cliente
            </summary>
        </member>
        <member name="M:SmartBar.Models.UserModel.#ctor">
            <summary>
            Construtor vazio do cliente
            </summary>
        </member>
        <member name="M:SmartBar.Models.UserModel.#ctor(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Construtor default do cliente
            </summary>
            <param name="Id"></param>
            <param name="Email"></param>
            <param name="Password"></param>
            <param name="Name"></param>
            <param name="Balance"></param>
        </member>
        <member name="P:SmartBar.Models.UserModel.Id">
            <summary>
            Id do cliente
            </summary>
        </member>
        <member name="P:SmartBar.Models.UserModel.Email">
            <summary>
            Email do cliente
            </summary>
        </member>
        <member name="P:SmartBar.Models.UserModel.Password">
            <summary>
            Password do cliente
            </summary>
        </member>
        <member name="P:SmartBar.Models.UserModel.Name">
            <summary>
            Nome do cliente
            </summary>
        </member>
        <member name="P:SmartBar.Models.UserModel.Balance">
            <summary>
            Saldo do cliente
            </summary>
        </member>
        <member name="T:SmartBar.Services.BarService">
            <summary>
            Serviço de ligação à coleção dos bares
            </summary>
        </member>
        <member name="M:SmartBar.Services.BarService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Construtor default de ligação à coleção dos bares
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:SmartBar.Services.BarService.GetAsync">
            <summary>
            Obter todos os bares
            </summary>
            <returns>Uma lista de bares</returns>
        </member>
        <member name="M:SmartBar.Services.BarService.GetAsyncByEmail(System.String)">
            <summary>
            Obter determinado bar
            </summary>
            <param name="email"></param>
            <returns>O bar, se existir</returns>
        </member>
        <member name="M:SmartBar.Services.BarService.GetAsyncById(System.String)">
            <summary>
            Obter determinado bar através do id
            </summary>
            <param name="id"></param>
            <returns>O bar, se existir</returns>
        </member>
        <member name="M:SmartBar.Services.BarService.CreateAsync(SmartBar.Models.BarModel)">
            <summary>
            Criar um novo bar
            </summary>
            <param name="newBar"></param>
            <returns>O novo bar criado</returns>
        </member>
        <member name="M:SmartBar.Services.BarService.UpdateAsync(System.String,SmartBar.Models.BarModel)">
            <summary>
            Atualizar determinado bar
            </summary>
            <param name="id"></param>
            <param name="updatedBar"></param>
            <returns>O bar atualizado</returns>
        </member>
        <member name="M:SmartBar.Services.BarService.RemoveAsync(System.String)">
            <summary>
            Remover determinado bar
            </summary>
            <param name="id"></param>
            <returns>True ou False</returns>
        </member>
        <member name="T:SmartBar.Services.HistoricService">
            <summary>
            Serviço de ligação à coleção do histórico
            </summary>
        </member>
        <member name="M:SmartBar.Services.HistoricService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Construtor default de ligação à coleção do histórico
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:SmartBar.Services.HistoricService.GetAsync">
            <summary>
            Obter todos os pedidos em Histórico
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Services.HistoricService.GetAsyncByClient(System.String)">
            <summary>
            Obter o histórico de pedidos de um cliente
            </summary>
            <param name="idClient"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Services.HistoricService.GetAsyncByBar(System.String)">
            <summary>
            Obter o Histórico de pedidos por idBar
            </summary>
            <param name="idBar"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Services.HistoricService.GetAsyncByBarAndDate(System.String,System.String)">
            <summary>
            Obter o Histórico de pedidos por idBar e por dateRequest
            </summary>
            <param name="idBar"></param>
            <param name="dateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:SmartBar.Services.HistoricService.CreateAsync(SmartBar.Models.HistoricModel)">
            <summary>
            Criar um novo item ao Histórico
            </summary>
            <param name="newHistoric"></param>
            <returns></returns>
        </member>
        <member name="T:SmartBar.Services.ProductService">
            <summary>
            Serviço de ligação à coleção dos produtos
            </summary>
        </member>
        <member name="M:SmartBar.Services.ProductService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Construtor default de ligação à coleção dos produtos
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:SmartBar.Services.ProductService.GetAsync">
            <summary>
            Obter todos os produtos
            </summary>
            <returns>A lista dos produtos</returns>
        </member>
        <member name="M:SmartBar.Services.ProductService.GetAsync(System.String)">
            <summary>
            Obter determinado produto através do id
            </summary>
            <param name="id"></param>
            <returns>O produto, se existir</returns>
        </member>
        <member name="M:SmartBar.Services.ProductService.GetAsyncByName(System.String)">
            <summary>
            Obter determinado produto através do nome
            </summary>
            <param name="name"></param>
            <returns>O produto se existir</returns>
        </member>
        <member name="M:SmartBar.Services.ProductService.CreateAsync(SmartBar.Models.ProductModel)">
            <summary>
            Criar um novo produto
            </summary>
            <param name="newProduct"></param>
            <returns>O novo produto criado</returns>
        </member>
        <member name="M:SmartBar.Services.ProductService.UpdateAsync(System.String,SmartBar.Models.ProductModel)">
            <summary>
            Atualizar determinado produto
            </summary>
            <param name="id"></param>
            <param name="updatedProduct"></param>
            <returns>O produto atualizado</returns>
        </member>
        <member name="M:SmartBar.Services.ProductService.RemoveAsync(System.String)">
            <summary>
            Remover determinado produto
            </summary>
            <param name="id"></param>
            <returns>True ou False</returns>
        </member>
        <member name="T:SmartBar.Services.PushNotificationService">
            <summary>
            Serviço de push notifications
            </summary>
        </member>
        <member name="M:SmartBar.Services.PushNotificationService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Contrutor do service de push notifications
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:SmartBar.Services.PushNotificationService.CreateAsync(SmartBar.Models.PushNotificationModel)">
            <summary>
            Inserir uma nova notificação
            </summary>
            <param name="newNotification"></param>
            <returns>O resultado da inserção</returns>
        </member>
        <member name="M:SmartBar.Services.PushNotificationService.GetAsyncByUser(System.String)">
            <summary>
            Obter todas as notificações por id de utilizador
            </summary>
            <param name="userId"></param>
            <returns>Lista de notificações</returns>
        </member>
        <member name="M:SmartBar.Services.PushNotificationService.DeleteAsync(System.String)">
            <summary>
            Apagar determinada notificação
            </summary>
            <param name="idNotification"></param>
            <returns>O resultado da operação</returns>
        </member>
        <member name="T:SmartBar.Services.UserService">
            <summary>
            Serviço de ligação à coleção dos clientes
            </summary>
        </member>
        <member name="M:SmartBar.Services.UserService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Construtor default de ligação à coleção dos clientes
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:SmartBar.Services.UserService.GetAsync">
            <summary>
            Obter todos os clientes
            </summary>
            <returns>Uma lista de clientes</returns>
        </member>
        <member name="M:SmartBar.Services.UserService.GetAsyncByEmail(System.String)">
            <summary>
            Obter determinado cliente através do email
            </summary>
            <param name="email"></param>
            <returns>O cliente, se existir</returns>
        </member>
        <member name="M:SmartBar.Services.UserService.GetAsyncById(System.String)">
            <summary>
            Obter determinado cliente através do id
            </summary>
            <param name="id"></param>
            <returns>O cliente, se existir</returns>
        </member>
        <member name="M:SmartBar.Services.UserService.CreateAsync(SmartBar.Models.UserModel)">
            <summary>
            Criar um novo cliente
            </summary>
            <param name="newUser"></param>
            <returns>O novo cliente criado</returns>
        </member>
        <member name="M:SmartBar.Services.UserService.UpdateAsync(System.String,SmartBar.Models.UserModel)">
            <summary>
            Atualizar determinado cliente
            </summary>
            <param name="id"></param>
            <param name="updatedUser"></param>
            <returns>O cliente atualizado</returns>
        </member>
        <member name="M:SmartBar.Services.UserService.RemoveAsync(System.String)">
            <summary>
            Remover determinado cliente
            </summary>
            <param name="id"></param>
            <returns>True ou False</returns>
        </member>
        <member name="T:RequestService">
            <summary>
            Serviço de ligação à coleção dos pedidos
            </summary>
        </member>
        <member name="M:RequestService.#ctor(Microsoft.Extensions.Options.IOptions{SmartBar.Models.SmartBarDatabaseSettingsModel})">
            <summary>
            Construtor default de ligação à coleção dos produtos
            </summary>
            <param name="smartBarDatabaseSettingsModel"></param>
        </member>
        <member name="M:RequestService.GetAsync">
            <summary>
            Obter todos os pedidos
            </summary>
            <returns>A lista dos pedidos</returns>
        </member>
        <member name="M:RequestService.GetAsyncByBarAndState(System.String,System.Int32)">
            <summary>
            Obter todos os pedidos de determinado bar, por estado
            </summary>
            <param name="idBar"></param>
            <param name="state"></param>
            <returns>A lista dos pedidos</returns>
        </member>
        <member name="M:RequestService.GetAsyncByRequestId(System.String)">
            <summary>
            Obter o Pedido por IdRequest
            </summary>
            <param name="idRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RequestService.GetAsyncByClientAndState(System.String,System.Int32)">
            <summary>
            Obter os pedidos de cada cliente em determinado estado
            </summary>
            <param name="state"></param>
            <param name="idClient"></param>
            <returns>Pedidos de determinado cliente e determinado estado</returns>
        </member>
        <member name="M:RequestService.GetAsyncByState(System.Int32)">
            <summary>
            Obter os pedidos por estado
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:RequestService.CreateAsync(SmartBar.Models.RequestModel)">
            <summary>
            Criar um novo Pedido
            </summary>
            <param name="newRequest"></param>
            <returns>Pedido Criado</returns>
        </member>
        <member name="M:RequestService.UpdateAsync(System.String,SmartBar.Models.RequestModel)">
            <summary>
            Atualizar um Pedido
            </summary>
            <param name="idRequest"></param>
            <param name="updatedRequest"></param>
            <returns>Pedido Atualizado</returns>
        </member>
        <member name="M:RequestService.DeleteAsync(System.String)">
            <summary>
            Eliminar um Pedido
            </summary>
            <param name="idRequest"></param>
            <returns>True or False</returns>
        </member>
    </members>
</doc>
